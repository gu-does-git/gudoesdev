import {
  BlogProvider,
  __objRest,
  __spreadProps,
  __spreadValues,
  sortDate,
  useBlogContext
} from "./chunk-VLYNOJJA.js";

// src/index.tsx
import React20 from "react";
import { ThemeProvider } from "next-themes";

// src/article-layout.tsx
import React15 from "react";

// src/meta.tsx
import React12 from "react";
import Link from "next/link";

// src/theme-switch.tsx
import React11, { useState, useEffect } from "react";
import { useTheme } from "next-themes";

// ../nextra/dist/icons.mjs
import React from "react";
import React2 from "react";
import React3 from "react";
import React4 from "react";
import React5 from "react";
import React6 from "react";
import React7 from "react";
import React8 from "react";
import React9 from "react";
import React10 from "react";
function MoonIcon({ className }) {
  return /* @__PURE__ */ React7.createElement("svg", {
    fill: "none",
    viewBox: "0 0 24 24",
    width: "24",
    height: "24",
    stroke: "currentColor",
    className
  }, /* @__PURE__ */ React7.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    strokeWidth: "2",
    d: "M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"
  }));
}
function SunIcon({ className }) {
  return /* @__PURE__ */ React9.createElement("svg", {
    fill: "none",
    viewBox: "0 0 24 24",
    width: "24",
    height: "24",
    stroke: "currentColor",
    className
  }, /* @__PURE__ */ React9.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    strokeWidth: "2",
    d: "M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"
  }));
}

// src/theme-switch.tsx
function ThemeSwitch() {
  const { theme, setTheme, resolvedTheme } = useTheme();
  const [mounted, setMounted] = useState(false);
  useEffect(() => setMounted(true), []);
  const isDark = theme === "dark" || resolvedTheme === "dark";
  const toggleTheme = () => {
    setTheme(isDark ? "light" : "dark");
  };
  return /* @__PURE__ */ React11.createElement("span", {
    role: "button",
    "aria-label": "Toggle Dark Mode",
    className: "cursor-pointer p-2 text-current",
    tabIndex: 0,
    onClick: toggleTheme,
    onKeyDown: (e) => {
      if (e.key === "Enter")
        toggleTheme();
    }
  }, mounted && isDark ? /* @__PURE__ */ React11.createElement(MoonIcon, null) : /* @__PURE__ */ React11.createElement(SunIcon, null));
}

// src/utils/get-tags.ts
function split(tags) {
  return (Array.isArray(tags) ? tags : tags.split(",")).map((s) => s.trim());
}
function getTags(page) {
  if (!page.frontMatter) {
    return [];
  }
  const tags = page.frontMatter.tag || "";
  return split(tags);
}

// src/meta.tsx
function Meta({
  author,
  date,
  tag,
  back,
  config
}) {
  const tags = tag ? split(tag) : [];
  return /* @__PURE__ */ React12.createElement("div", {
    className: "mb-8 flex items-center gap-3"
  }, /* @__PURE__ */ React12.createElement("div", {
    className: "flex flex-1 flex-wrap items-center gap-1 text-gray-400 not-prose"
  }, author, author && date && ",", date && /* @__PURE__ */ React12.createElement("time", {
    dateTime: new Date(date).toISOString()
  }, new Date(date).toDateString()), (author || date) && tags.length > 0 && "\u2022", tags.map((t) => /* @__PURE__ */ React12.createElement(Link, {
    key: t,
    href: "/tags/[tag]",
    as: `/tags/${t}`
  }, /* @__PURE__ */ React12.createElement("a", {
    className: "\n                select-none\n                rounded-md\n                px-1\n                transition-colors\n                text-sm\n                text-gray-400\n                hover:text-gray-500\n                dark:text-gray-300\n                dark:hover:text-gray-200\n                bg-gray-200\n                hover:bg-gray-300\n                dark:bg-gray-600\n                dark:hover:bg-gray-700\n              "
  }, t)))), back && /* @__PURE__ */ React12.createElement(Link, {
    href: back,
    passHref: true
  }, /* @__PURE__ */ React12.createElement("a", null, "Back")), config.darkMode && /* @__PURE__ */ React12.createElement(ThemeSwitch, null));
}

// src/mdx-theme.tsx
import React13, {
  createContext,
  useContext,
  useEffect as useEffect2,
  useState as useState2
} from "react";
import { MDXProvider } from "@mdx-js/react";
import Link2 from "next/link";
import ReactDOM from "react-dom";
var HeadingContext = createContext(React13.createRef());
var useHeadingRef = () => {
  const ref = useContext(HeadingContext);
  return ref;
};
var H1 = ({ children }) => {
  const ref = useHeadingRef();
  const {
    opts: { hasJsxInH1 }
  } = useBlogContext();
  const [showHeading, setShowHeading] = useState2(false);
  useEffect2(() => {
    if (ref.current && hasJsxInH1) {
      setShowHeading(true);
    }
  }, []);
  return /* @__PURE__ */ React13.createElement(React13.Fragment, null, showHeading ? ReactDOM.createPortal(children, ref.current) : null);
};
var createHeaderLink = (Tag) => (_a) => {
  var _b = _a, { children, id } = _b, props = __objRest(_b, ["children", "id"]);
  return /* @__PURE__ */ React13.createElement(Tag, __spreadValues({
    className: `subheading-${Tag}`
  }, props), /* @__PURE__ */ React13.createElement("span", {
    className: "subheading-anchor -mt-8",
    id
  }), /* @__PURE__ */ React13.createElement("a", {
    href: `#${id}`
  }, children));
};
var A = (_a) => {
  var _b = _a, {
    children
  } = _b, props = __objRest(_b, [
    "children"
  ]);
  const isExternal = props.href && props.href.startsWith("https://");
  if (isExternal) {
    return /* @__PURE__ */ React13.createElement("a", __spreadValues({
      target: "_blank",
      rel: "noreferrer"
    }, props), children);
  }
  return props.href ? /* @__PURE__ */ React13.createElement(Link2, {
    href: props.href
  }, /* @__PURE__ */ React13.createElement("a", __spreadValues({}, props), children)) : /* @__PURE__ */ React13.createElement(React13.Fragment, null);
};
var Pre = ({ children }) => {
  return /* @__PURE__ */ React13.createElement("div", {
    className: "not-prose"
  }, /* @__PURE__ */ React13.createElement("pre", null, children));
};
var components = {
  h1: H1,
  h2: createHeaderLink("h2"),
  h3: createHeaderLink("h3"),
  h4: createHeaderLink("h4"),
  h5: createHeaderLink("h5"),
  h6: createHeaderLink("h6"),
  a: A,
  pre: Pre
};
var MDXTheme = ({ children }) => {
  return /* @__PURE__ */ React13.createElement(MDXProvider, {
    components
  }, children);
};
var mdx_theme_default = MDXTheme;

// src/basic-layout.tsx
import Head from "next/head";
import React14, { useRef } from "react";
var BasicLayout = ({ children }) => {
  var _a;
  const { config, opts } = useBlogContext();
  const title = `${opts.title}${config.titleSuffix || ""}`;
  const ref = useRef(null);
  return /* @__PURE__ */ React14.createElement("article", {
    className: "container prose prose-sm dark:prose-dark md:prose"
  }, /* @__PURE__ */ React14.createElement(Head, null, /* @__PURE__ */ React14.createElement("title", null, title), (_a = config.head) == null ? void 0 : _a.call(config, { title, meta: opts.meta })), /* @__PURE__ */ React14.createElement(HeadingContext.Provider, {
    value: ref
  }, opts.hasJsxInH1 ? /* @__PURE__ */ React14.createElement("h1", {
    ref
  }) : null, !opts.hasJsxInH1 ? /* @__PURE__ */ React14.createElement("h1", null, opts.title) : null, children, config.footer));
};

// src/utils/traverse.ts
function traverse(pageMap, matcher) {
  for (const pageMapItem of pageMap) {
    if (matcher(pageMapItem)) {
      return pageMapItem;
    }
  }
  for (const pageMapItem of pageMap) {
    const { children } = pageMapItem;
    if (children) {
      const matched = traverse(children, matcher);
      if (matched) {
        return matched;
      }
    }
  }
  return null;
}

// src/utils/parent.ts
var getParent = ({ opts }) => {
  let back = null;
  const parentPages = [];
  const route = opts.route;
  traverse(opts.pageMap, (page) => {
    if (route !== page.route && (route + "/").startsWith(page.route === "/" ? "/" : page.route + "/")) {
      parentPages.push(page);
    }
  });
  const parentPage = parentPages.reverse().find((page) => page.frontMatter && page.frontMatter.type === "posts");
  if (parentPage) {
    back = parentPage.route;
  }
  return {
    parentPage,
    back
  };
};

// src/article-layout.tsx
var ArticleLayout = ({ children }) => {
  const { opts, config } = useBlogContext();
  const { back } = getParent({ opts, config });
  return /* @__PURE__ */ React15.createElement(BasicLayout, null, /* @__PURE__ */ React15.createElement(Meta, __spreadProps(__spreadValues({}, opts.meta), {
    back,
    config
  })), /* @__PURE__ */ React15.createElement(mdx_theme_default, null, children, config.postFooter, config.comments));
};

// src/posts-layout.tsx
import Link4 from "next/link";
import { useRouter } from "next/router";
import React17 from "react";

// src/nav.tsx
import React16 from "react";
import Link3 from "next/link";

// src/utils/collect.ts
var isNav = (page) => {
  return page.frontMatter && ["page", "posts"].includes(page.frontMatter.type);
};
var isPost = (page) => {
  var _a;
  if (page.children)
    return false;
  if (page.name.startsWith("_"))
    return false;
  return !((_a = page.frontMatter) == null ? void 0 : _a.type) || page.frontMatter.type === "post";
};
var collectPostsAndNavs = ({ opts }) => {
  const posts = [];
  const navPages = [];
  const { route } = opts;
  traverse(opts.pageMap, (page) => {
    if (isNav(page)) {
      navPages.push(__spreadProps(__spreadValues({}, page), { active: page.route === route }));
    }
    if (isPost(page)) {
      posts.push(page);
    }
  });
  posts.sort(sortDate);
  navPages.sort(sortDate);
  return { posts, navPages };
};

// src/nav.tsx
function Nav() {
  var _a;
  const { opts, config } = useBlogContext();
  const { navPages } = collectPostsAndNavs({ opts, config });
  return /* @__PURE__ */ React16.createElement("div", {
    className: "mb-8 flex items-center gap-3"
  }, /* @__PURE__ */ React16.createElement("div", {
    className: "flex grow flex-wrap items-center justify-end gap-3"
  }, navPages.map((page) => {
    var _a2, _b;
    if (page.active) {
      return /* @__PURE__ */ React16.createElement("span", {
        key: page.route,
        className: "cursor-default text-gray-400"
      }, ((_a2 = page.frontMatter) == null ? void 0 : _a2.title) || page.name);
    }
    return /* @__PURE__ */ React16.createElement(Link3, {
      key: page.route,
      href: page.route,
      passHref: true
    }, /* @__PURE__ */ React16.createElement("a", null, ((_b = page.frontMatter) == null ? void 0 : _b.title) || page.name));
  }), (_a = config.navs) == null ? void 0 : _a.map((nav) => /* @__PURE__ */ React16.createElement(Link3, {
    key: nav.url,
    href: nav.url,
    passHref: true
  }, /* @__PURE__ */ React16.createElement("a", null, nav.name)))), config.darkMode && /* @__PURE__ */ React16.createElement(ThemeSwitch, null));
}

// src/posts-layout.tsx
var PostsLayout = ({ children }) => {
  const { config, opts } = useBlogContext();
  const { posts } = collectPostsAndNavs({ config, opts });
  const router = useRouter();
  const {
    meta: { type }
  } = opts;
  const tagName = type === "tag" ? router.query.tag : null;
  const postList = posts.map((post) => {
    var _a, _b, _c;
    if (tagName) {
      const tags = getTags(post);
      if (!Array.isArray(tagName) && !tags.includes(tagName)) {
        return null;
      }
    } else if (type === "tag") {
      return null;
    }
    const postTitle = ((_a = post.frontMatter) == null ? void 0 : _a.title) || post.name;
    const date = ((_b = post.frontMatter) == null ? void 0 : _b.date) && new Date(post.frontMatter.date);
    const description = (_c = post.frontMatter) == null ? void 0 : _c.description;
    return /* @__PURE__ */ React17.createElement("div", {
      key: post.route,
      className: "post-item"
    }, /* @__PURE__ */ React17.createElement("h3", null, /* @__PURE__ */ React17.createElement(Link4, {
      href: post.route,
      passHref: true
    }, /* @__PURE__ */ React17.createElement("a", {
      className: "!no-underline"
    }, postTitle))), description && /* @__PURE__ */ React17.createElement("p", {
      className: "mb-2 text-gray-400"
    }, description, config.readMore && /* @__PURE__ */ React17.createElement(Link4, {
      href: post.route,
      passHref: true
    }, /* @__PURE__ */ React17.createElement("a", {
      className: "post-item-more ml-2"
    }, config.readMore))), date && /* @__PURE__ */ React17.createElement("time", {
      className: "text-sm text-gray-300",
      dateTime: date.toISOString()
    }, date.toDateString()));
  });
  return /* @__PURE__ */ React17.createElement(BasicLayout, null, /* @__PURE__ */ React17.createElement(Nav, null), /* @__PURE__ */ React17.createElement(mdx_theme_default, null, children), postList);
};

// src/page-layout.tsx
import React18 from "react";
var PageLayout = ({ children }) => {
  return /* @__PURE__ */ React18.createElement(BasicLayout, null, /* @__PURE__ */ React18.createElement(Nav, null), /* @__PURE__ */ React18.createElement(mdx_theme_default, null, children));
};

// src/constants.tsx
import React19 from "react";
var DEFAULT_THEME = {
  readMore: "Read More \u2192",
  footer: /* @__PURE__ */ React19.createElement("small", {
    className: "block mt-32"
  }, "CC BY-NC 4.0 ", new Date().getFullYear(), " \xA9 Shu Ding.")
};

// src/index.tsx
import { useRouter as useRouter2 } from "next/router";
import { useTheme as useTheme2 } from "next-themes";
var layoutMap = {
  post: ArticleLayout,
  page: PageLayout,
  posts: PostsLayout,
  tag: PostsLayout
};
var BlogLayout = ({
  config,
  children,
  opts
}) => {
  const type = opts.meta.type || "post";
  const Layout2 = layoutMap[type];
  if (!Layout2) {
    throw new Error(`Nextra-themes-blog does not support the layout type "${type}" It only supports "post", "page", "posts" and "tag"`);
  }
  return /* @__PURE__ */ React20.createElement(BlogProvider, {
    opts,
    config
  }, /* @__PURE__ */ React20.createElement(Layout2, null, children));
};
var nextraPageContext = {};
function Layout(props) {
  const { route } = useRouter2();
  const context = nextraPageContext[route];
  if (!context)
    throw new Error(`No content found for ${route}.`);
  const extendedConfig = __spreadValues(__spreadValues({}, DEFAULT_THEME), context.themeConfig);
  return /* @__PURE__ */ React20.createElement(ThemeProvider, {
    attribute: "class",
    defaultTheme: "system",
    enableSystem: true
  }, /* @__PURE__ */ React20.createElement(BlogLayout, {
    config: extendedConfig,
    opts: context.pageOpts
  }, /* @__PURE__ */ React20.createElement(context.Content, __spreadValues({}, props))));
}
function withLayout(route, Content, pageOpts, themeConfig) {
  nextraPageContext[route] = {
    Content,
    pageOpts,
    themeConfig
  };
  return Layout;
}
export {
  withLayout as default,
  useBlogContext,
  useTheme2 as useTheme
};
