---
const menus = [
  {
    name: "Home",
    url: "/",
  },
  {
    name: "Posts",
    url: "/posts",
  },
  {
    name: "Projects",
    url: "/projects",
  },
  {
    name: "About",
    url: "/about",
  },
];
import Logo from "../components/Logo.astro";
import { Icon } from "astro-icon/components";
---

<!-- This is an invisible div with relative position so that it takes up the height of the menu (because menu is absolute/fixed) -->
<div class="pointer-events-none relative h-20 w-full opacity-0"></div>
<header id="header" class="absolute top-0 z-50 h-20 w-full">
  <div
    class="mx-auto flex h-full max-w-5xl select-none items-center justify-between border-b border-l-0 border-r-0 border-neutral-300 pl-6 pr-4 lg:rounded-b-xl lg:border-l lg:border-r"
  >
    <Logo />
    <nav
      class="relative z-30 flex w-full flex-row-reverse justify-start text-sm text-neutral-500 sm:flex-row sm:justify-end dark:text-neutral-400"
    >
      <div
        id="menu"
        class="dm:mx-0 fixed left-0 top-[75px] z-40 hidden h-auto w-full flex-col items-end justify-start pb-4 pt-7 text-sm sm:relative sm:top-0 sm:flex sm:h-auto sm:w-auto sm:flex-row sm:py-0 sm:pr-0 sm:pt-0 sm:text-base"
      >
        <div
          class="absolute inset-0 right-0 top-0 block h-full w-full px-3 sm:hidden"
        >
          <div
            class="relative h-full w-full rounded-xl border border-dashed border-neutral-300 bg-white backdrop-blur-sm dark:border-neutral-700 dark:bg-neutral-950"
          >
          </div>
        </div>
        {
          menus.map(menu => {
            return (
              <a
                href={menu.url}
                class="relative flex w-full items-center justify-center px-3 py-2 text-center font-medium tracking-wide hover:text-neutral-900 sm:mb-0 sm:py-0 md:w-auto dark:hover:text-white"
              >
                {menu.name}
              </a>
            );
          })
        }
      </div>
      <button
        id="themeButton"
        class="rounded-lg p-0 text-xl"
        aria-label="Toggle theme"
      >
        <Icon
          name="material-symbols:dark-mode-rounded"
          class="block text-gray-500 hover:text-gray-700 dark:hidden"
        />
        <Icon
          name="material-symbols:light-mode-rounded"
          class="hidden text-yellow-300 hover:text-yellow-500 dark:block"
        />
      </button>
    </nav>
  </div>
</header>
<script>
  function handleClick() {
    // Get current theme
    const currentTheme =
      document.documentElement.attributes.getNamedItem("data-theme")?.value;

    // Toggle between the themes based on the current theme
    document.dispatchEvent(
      new CustomEvent("set-theme", {
        detail: currentTheme === "dark" ? "light" : "dark",
      })
    );
  }
  const themeButton = document.getElementById("themeButton");
  if (themeButton) {
    themeButton.addEventListener("click", handleClick);
  }
</script>
<script>
  const stickyHeaderFuncionality = () => {
    window.addEventListener("scroll", () => {
      evaluateHeaderPosition();
    });
  };

  const evaluateHeaderPosition = () => {
    const headerElement = document.getElementById("header");
    const menuElement = document.getElementById("menu");
    const stickyClasses = ["fixed", "h-14"];
    const unstickyClasses = ["absolute", "h-20"];
    const stickyClassesContainer = [
      "border-neutral-300/50",
      "bg-white/80",
      "dark:border-neutral-600/40",
      "dark:bg-neutral-900/60",
      "backdrop-blur-2xl",
    ];
    const unstickyClassesContainer = ["border-transparent"];
    if (
      headerElement &&
      headerElement.firstElementChild &&
      menuElement &&
      menuElement.firstElementChild
    ) {
      console.log("evaluating header position");
      if (window.scrollY > 16) {
        headerElement.firstElementChild.classList.add(
          ...stickyClassesContainer
        );
        headerElement.firstElementChild.classList.remove(
          ...unstickyClassesContainer
        );
        headerElement.classList.add(...stickyClasses);
        headerElement.classList.remove(...unstickyClasses);
        menuElement.classList.add("top-[56px]");
        menuElement.classList.remove("top-[75px]");
      } else {
        headerElement.firstElementChild.classList.remove(
          ...stickyClassesContainer
        );
        headerElement.firstElementChild.classList.add(
          ...unstickyClassesContainer
        );
        headerElement.classList.add(...unstickyClasses);
        headerElement.classList.remove(...stickyClasses);
        menuElement.classList.remove("top-[56px]");
        menuElement.classList.add("top-[75px]");
      }
    }
  };

  const applyMenuItemClasses = () => {
    const menuItems = document.querySelectorAll("#menu a");
    for (let i = 0; i < menuItems.length; i++) {
      if (menuItems[i].getAttribute("href") === window.location.pathname) {
        menuItems[i].classList.add("text-neutral-900", "dark:text-white");
      }
    }
    //:class="{ 'text-neutral-900 dark:text-white': window.location.pathname == '{menu.url}', 'text-neutral-700 dark:text-neutral-400': window.location.pathname != '{menu.url}' }"
  };

  document.addEventListener("DOMContentLoaded", () => {
    stickyHeaderFuncionality();
    applyMenuItemClasses();
    evaluateHeaderPosition();
  });
</script>
